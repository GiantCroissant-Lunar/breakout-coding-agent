name: Auto-merge Flow-RFC PRs

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review, edited]
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'copilot/')

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        persist-credentials: true
        fetch-depth: 1
    - name: Auto-ready draft PRs
      run: |
        # If this is a draft PR from copilot, mark it ready automatically
        if [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
          echo "üöÄ Draft PR detected - marking as ready for review"
          gh pr ready ${{ github.event.number }}
          sleep 5  # Give GitHub time to process the change
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Validate PR format
      run: |
        set -euo pipefail
        REPO="${{ github.repository }}"
        PR_NUMBER="${{ github.event.number }}"
        echo "Validating PR #$PR_NUMBER for auto-merge eligibility..."

        PR_TITLE=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json title --jq .title)
        echo "Title: $PR_TITLE"

        if [[ "$PR_TITLE" == *"Flow-RFC-001"* ]]; then
          echo "Flow-RFC-001 PR detected - validating only README.md changed"
          files_changed=$(gh api repos/"$REPO"/pulls/"$PR_NUMBER"/files --jq '.[].filename' | wc -l)
          if [ "$files_changed" -gt 1 ]; then
            echo "Too many files changed ($files_changed)"; exit 1; fi
          readme_changed=$(gh api repos/"$REPO"/pulls/"$PR_NUMBER"/files --jq '.[] | select(.filename == "README.md") | .filename')
          if [ -z "$readme_changed" ]; then echo "README.md not changed"; exit 1; fi
          echo "Flow-RFC-001 validation passed"
        elif [[ "$PR_TITLE" == *"Game-RFC-"* ]]; then
          echo "Game-RFC PR detected"
          closing_count=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json closingIssuesReferences --jq '.closingIssuesReferences | length' || echo 0)
          if [ "${closing_count:-0}" -gt 0 ]; then
            echo "Issue reference present via closing keywords"
          else
            echo "Missing closing keyword; posting guidance comment and failing validation"
            rfc_num=$(printf "%s" "$PR_TITLE" | sed -nE 's/.*Game-RFC-([0-9]+).*/\1/p' | head -1)
            suggestion="Fixes #<issue-number>"
            if [ -n "$rfc_num" ]; then
              issue_num=$(gh issue list --repo "$REPO" --state open --label game-rfc --json number,title \
                --jq ".[] | select(.title | test(\"Game-RFC-$rfc_num\\b\")) | .number" | head -1 || true)
              if [ -n "$issue_num" ]; then suggestion="Fixes #$issue_num"; fi
            fi
            gh pr comment "$PR_NUMBER" --repo "$REPO" --body "Hi! This PR looks like a Game-RFC implementation but it doesn't reference its tracking issue. For full automation, please add a closing keyword to the PR description so the workflow can auto-merge it. Add this line to the PR description: $suggestion After updating, the Auto-merge workflow will re-run and merge automatically. Thanks!"
            exit 1
          fi
          echo "Game-RFC validation passed"
        else
          echo "Not a recognized RFC PR, skipping auto-merge"; exit 0
        fi
        echo "PR validation completed successfully"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Auto-approve and merge
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"

        if [[ "$PR_TITLE" == *"Flow-RFC-001"* ]]; then
          echo "Auto-approving Flow-RFC-001 PR..."
          APPROVAL_MSG="‚úÖ Flow-RFC-001 auto-approved: Basic PR merge cycle validation"
          MERGE_MSG="‚úÖ Auto-merged Flow-RFC-001 test PR"

        elif [[ "$PR_TITLE" == *"Game-RFC-"* ]]; then
          RFC_NUM=$(echo "$PR_TITLE" | grep -o 'Game-RFC-[0-9]\+' | head -1)
          echo "Auto-approving $RFC_NUM PR..."
          APPROVAL_MSG="‚úÖ $RFC_NUM auto-approved: Implementation validated"
          MERGE_MSG="‚úÖ Auto-merged $RFC_NUM implementation"

        else
          echo "‚ùå Unexpected PR type reached auto-merge step"
          exit 1
        fi

        # Auto-approve and merge the PR (fully automated)
        echo "ü§ñ Auto-approving and merging RFC implementation..."
        gh pr review ${{ github.event.number }} --approve --body "$APPROVAL_MSG"

        # Wait a moment for approval to register
        sleep 5

        # Auto-merge with branch deletion (fully automated)
        gh pr merge ${{ github.event.number }} --squash --delete-branch --body "$MERGE_MSG"

        echo "‚úÖ PR merged successfully"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Flow-RFC status
      if: success()
      run: |
        echo "Flow-RFC-001 completed successfully! üéâ"
        echo "GitHub Coding Agent can now reliably merge PRs."
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
