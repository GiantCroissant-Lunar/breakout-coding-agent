name: Handle Failed Micro-Issue

on:
  workflow_dispatch:
    inputs:
      failed_issue_number:
        description: 'Issue number that failed (e.g., 52)'
        required: true
        type: string
      restart_strategy:
        description: 'How to handle the failure'
        required: true
        type: choice
        options:
          - 'restart_same_issue'
          - 'skip_to_next_issue'
          - 'recreate_issue'
        default: 'restart_same_issue'

permissions:
  issues: write
  pull-requests: write

jobs:
  handle-failure:
    runs-on: ubuntu-latest
    steps:
      - name: Handle failed micro-issue
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"
          FAILED_ISSUE="${{ github.event.inputs.failed_issue_number }}"
          STRATEGY="${{ github.event.inputs.restart_strategy }}"
          
          echo "üö® Handling failed micro-issue #$FAILED_ISSUE with strategy: $STRATEGY"
          
          # Get issue details
          ISSUE_DATA=$(gh issue view "$FAILED_ISSUE" --repo "$REPO" --json title,assignees,state)
          ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r .title)
          ISSUE_STATE=$(echo "$ISSUE_DATA" | jq -r .state)
          
          echo "üìã Issue: $ISSUE_TITLE"
          echo "üîç Current state: $ISSUE_STATE"
          
          # Close any bad PRs associated with this issue
          echo "üßπ Cleaning up failed PRs..."
          gh pr list --repo "$REPO" --state open --json number,title,body | \
            jq -r ".[] | select(.title | contains(\"$FAILED_ISSUE\") or .body | contains(\"#$FAILED_ISSUE\")) | .number" | \
            while read pr_num; do
              if [ -n "$pr_num" ]; then
                echo "‚ùå Closing failed PR #$pr_num"
                gh pr close "$pr_num" --repo "$REPO" --comment "‚ùå Closing failed PR - restarting micro-issue implementation"
              fi
            done
          
          case "$STRATEGY" in
            "restart_same_issue")
              echo "üîÑ Restarting same issue #$FAILED_ISSUE"
              
              # Unassign and reassign to trigger fresh start
              gh issue edit "$FAILED_ISSUE" --repo "$REPO" --remove-assignee Copilot || true
              sleep 2
              gh issue edit "$FAILED_ISSUE" --repo "$REPO" --add-assignee Copilot
              
              # Add restart comment
              gh issue comment "$FAILED_ISSUE" --repo "$REPO" --body "üîÑ **Micro-Issue Restarted**

          Previous implementation attempt failed. Starting fresh implementation.

          **Strategy**: Clean slate approach - previous PR has been closed, Copilot reassigned for new attempt.

          **Instructions**: Please implement this micro-issue from scratch, ignoring any previous attempts."
              
              echo "‚úÖ Issue #$FAILED_ISSUE restarted"
              ;;
              
            "skip_to_next_issue")
              echo "‚è≠Ô∏è Skipping to next micro-issue"
              
              # Close current issue as won't fix
              gh issue close "$FAILED_ISSUE" --repo "$REPO" --reason "not_planned"
              gh issue comment "$FAILED_ISSUE" --repo "$REPO" --body "‚è≠Ô∏è **Skipped Issue**

          This micro-issue implementation was problematic. Skipping to next micro-issue in sequence to maintain momentum.

          **Note**: May need manual implementation later or integration with subsequent micro-issues."
              
              # Extract next issue number and assign
              if [[ "$ISSUE_TITLE" =~ Game-RFC-([0-9]+)-([0-9]+) ]]; then
                RFC_NUM="${BASH_REMATCH[1]}"
                CURRENT_MICRO="${BASH_REMATCH[2]}"
                NEXT_MICRO=$((CURRENT_MICRO + 1))
                
                NEXT_ISSUE=$(gh issue list --repo "$REPO" --state open --json number,title \
                  --jq ".[] | select(.title | test(\"Game-RFC-$RFC_NUM-$NEXT_MICRO:\")) | .number" | head -1 || true)
                
                if [ -n "$NEXT_ISSUE" ]; then
                  gh issue edit "$NEXT_ISSUE" --repo "$REPO" --add-assignee Copilot
                  gh issue comment "$NEXT_ISSUE" --repo "$REPO" --body "‚è≠Ô∏è **Fast-tracked from skipped issue**

          Previous micro-issue #$FAILED_ISSUE was skipped due to implementation issues.

          **Note**: You may need to account for missing functionality from the skipped micro-issue."
                  echo "‚úÖ Next micro-issue #$NEXT_ISSUE assigned"
                fi
              fi
              ;;
              
            "recreate_issue")
              echo "üÜï Recreating issue with simplified scope"
              
              # Close original issue
              gh issue close "$FAILED_ISSUE" --repo "$REPO" --reason "not_planned"
              gh issue comment "$FAILED_ISSUE" --repo "$REPO" --body "üÜï **Issue Recreated**

          This issue was too complex. A simplified version has been created to maintain momentum."
              
              # Create simplified version
              SIMPLIFIED_TITLE=$(echo "$ISSUE_TITLE" | sed 's/Game-RFC-/Game-RFC-SIMPLE-/')
              
              NEW_ISSUE=$(gh issue create --repo "$REPO" \
                --title "$SIMPLIFIED_TITLE" \
                --body "üÜï **Simplified version of #$FAILED_ISSUE**

          Original issue: $ISSUE_TITLE

          **Simplified scope**: Focus on core functionality only, skip advanced features.

          **Instructions**: Implement minimal working version that satisfies basic requirements." \
                --assignee Copilot \
                --label game-rfc)
              
              echo "‚úÖ Created simplified issue: $NEW_ISSUE"
              ;;
          esac
        
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "üéØ Failed micro-issue handling completed!"
          echo "Strategy: ${{ github.event.inputs.restart_strategy }}"
          echo "Issue: #${{ github.event.inputs.failed_issue_number }}"