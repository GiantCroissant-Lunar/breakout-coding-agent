name: Handle Failed Micro-Issue

on:
  workflow_dispatch:
    inputs:
      failed_issue_number:
        description: 'Issue number that failed (e.g., 52)'
        required: true
        type: string
      restart_strategy:
        description: 'How to handle the failure'
        required: true
        type: choice
        options:
          - restart_same_issue
          - skip_to_next_issue
          - recreate_issue
        default: restart_same_issue

permissions:
  issues: write
  pull-requests: write

jobs:
  handle-failure:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Handle failed micro-issue
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"
          FAILED_ISSUE="${{ github.event.inputs.failed_issue_number }}"
          STRATEGY="${{ github.event.inputs.restart_strategy }}"

          echo "[info] Handling failed micro-issue #$FAILED_ISSUE (strategy=$STRATEGY)"

          # Get issue details
          ISSUE_DATA=$(gh issue view "$FAILED_ISSUE" --repo "$REPO" --json title,assignees,state)
          ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r .title)
          ISSUE_STATE=$(echo "$ISSUE_DATA" | jq -r .state)

          echo "[info] Issue: $ISSUE_TITLE"
          echo "[info] State: $ISSUE_STATE"

          # Close any bad PRs associated with this issue
          echo "[info] Cleaning up failed PRs..."
          gh pr list --repo "$REPO" --state open --json number,title,body \
            | jq -r ".[] | select((.title|tostring|contains(\"$FAILED_ISSUE\")) or (.body|tostring|contains(\"#$FAILED_ISSUE\"))) | .number" \
            | while read pr_num; do
                if [ -n "$pr_num" ]; then
                  echo "[info] Closing PR #$pr_num"
                  gh pr close "$pr_num" --repo "$REPO" --comment "Closing failed PR to restart micro-issue"
                fi
              done

          case "$STRATEGY" in
            restart_same_issue)
              echo "[info] Restarting same issue #$FAILED_ISSUE"

              # Unassign and reassign to trigger fresh start
              gh issue edit "$FAILED_ISSUE" --repo "$REPO" --remove-assignee Copilot || true
              sleep 2
              gh issue edit "$FAILED_ISSUE" --repo "$REPO" --add-assignee Copilot

              # Add restart comment
              gh issue comment "$FAILED_ISSUE" --repo "$REPO" --body "**Micro-Issue Restarted**

          Previous implementation attempt failed. Starting fresh implementation.

          Strategy: Clean slate. Previous PR closed, Copilot reassigned.

          Instructions: Please re-implement this micro-issue from scratch."

              echo "[info] Issue #$FAILED_ISSUE restarted"
              ;;

            skip_to_next_issue)
              echo "[info] Skipping to next micro-issue"

              # Close current issue as won't fix
              gh issue close "$FAILED_ISSUE" --repo "$REPO" --reason "not_planned"
              gh issue comment "$FAILED_ISSUE" --repo "$REPO" --body "**Skipped Issue**

          This micro-issue had blocking problems. Skipping to next in sequence.

          Note: You may need to cover missing functionality later."

              # Extract next issue number and assign
              if [[ "$ISSUE_TITLE" =~ Game-RFC-([0-9]+)-([0-9]+) ]]; then
                RFC_NUM="${BASH_REMATCH[1]}"
                CURRENT_MICRO="${BASH_REMATCH[2]}"
                NEXT_MICRO=$((CURRENT_MICRO + 1))

                NEXT_ISSUE=$(gh issue list --repo "$REPO" --state open --json number,title \
                  --jq ".[] | select(.title | test(\"Game-RFC-$RFC_NUM-$NEXT_MICRO:\")) | .number" | head -1 || true)

                if [ -n "$NEXT_ISSUE" ]; then
                  gh issue edit "$NEXT_ISSUE" --repo "$REPO" --add-assignee Copilot
                  gh issue comment "$NEXT_ISSUE" --repo "$REPO" --body "**Fast-tracked from skipped issue**

          Previous micro-issue #$FAILED_ISSUE was skipped due to implementation issues.

          Note: Account for any missing functionality."
                  echo "[info] Assigned next micro-issue #$NEXT_ISSUE"
                fi
              fi
              ;;

            recreate_issue)
              echo "[info] Recreating issue with simplified scope"

              # Close original issue
              gh issue close "$FAILED_ISSUE" --repo "$REPO" --reason "not_planned"
              gh issue comment "$FAILED_ISSUE" --repo "$REPO" --body "**Issue Recreated**

          Original issue too complex. Creating simplified version to maintain momentum."

              # Create simplified version
              SIMPLIFIED_TITLE=$(echo "$ISSUE_TITLE" | sed 's/Game-RFC-/Game-RFC-SIMPLE-/')

              NEW_ISSUE=$(gh issue create --repo "$REPO" \
                --title "$SIMPLIFIED_TITLE" \
                --body "**Simplified version of #$FAILED_ISSUE**

          Original: $ISSUE_TITLE

          Simplified scope: Focus on core functionality; skip advanced features.

          Instructions: Implement a minimal working version first." \
                --assignee Copilot \
                --label game-rfc)

              echo "[info] Created simplified issue: $NEW_ISSUE"
              ;;
          esac

      - name: Summary
        run: |
          echo "[info] Failed micro-issue handling completed!"
          echo "Strategy: ${{ github.event.inputs.restart_strategy }}"
          echo "Issue: #${{ github.event.inputs.failed_issue_number }}"

