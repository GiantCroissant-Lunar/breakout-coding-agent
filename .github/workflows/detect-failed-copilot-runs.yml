name: Detect Failed Copilot Runs

on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      lookback_hours:
        description: 'Hours to look back for failed runs'
        required: false
        type: number
        default: 2

permissions:
  actions: read
  issues: write
  pull-requests: write

jobs:
  detect-and-cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect failed runs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"
          LOOKBACK_HOURS="${{ github.event.inputs.lookback_hours || '2' }}"
          
          echo "Scanning for failed Copilot runs in last ${LOOKBACK_HOURS} hours..."
          
          # Step 1: Find failed workflow runs
          CUTOFF_TIME=$(date -u -d "${LOOKBACK_HOURS} hours ago" +"%Y-%m-%dT%H:%M:%SZ")
          echo "Looking for failures since: $CUTOFF_TIME"
          
          # Get failed workflow runs that might be Copilot-related
          FAILED_RUNS=$(gh run list --repo "$REPO" --status failure --limit 20 --json databaseId,headBranch,conclusion,createdAt --jq "
            [.[] | select(.createdAt > \"$CUTOFF_TIME\" and .conclusion == \"failure\")] | 
            map({id: .databaseId, branch: .headBranch})
          ")
          
          echo "Found failed runs: $FAILED_RUNS"
          
          if [[ "$FAILED_RUNS" == "[]" ]]; then
            echo "No failed workflow runs found in the last ${LOOKBACK_HOURS} hours"
            exit 0
          fi
          
          # Step 2: For each failed run, find associated PR and issue
          echo "$FAILED_RUNS" | jq -r '.[] | "\(.id) \(.branch)"' | while read -r run_id branch; do
            if [[ -n "$run_id" && -n "$branch" ]]; then
              echo "Processing failed run $run_id on branch $branch"
              
              # Find PR for this branch
              PR_DATA=$(gh pr list --repo "$REPO" --head "$branch" --state all --json number,title,body,state --limit 1)
              PR_NUMBER=$(echo "$PR_DATA" | jq -r '.[0].number // empty')
              
              if [[ -n "$PR_NUMBER" ]]; then
                echo "Found PR #$PR_NUMBER for branch $branch"
                
                # Extract issue number from PR title or body
                PR_TITLE=$(echo "$PR_DATA" | jq -r '.[0].title // ""')
                PR_BODY=$(echo "$PR_DATA" | jq -r '.[0].body // ""')
                
                # Look for Game-RFC pattern in title first, then body
                ISSUE_NUMBER=""
                if [[ "$PR_TITLE" =~ Game-RFC-[0-9]+-([0-9]+) ]]; then
                  # Find the actual issue number for this micro-issue
                  MICRO_PATTERN="Game-RFC-[0-9]+-${BASH_REMATCH[1]}:"
                  ISSUE_NUMBER=$(gh issue list --repo "$REPO" --state all --json number,title --jq ".[] | select(.title | test(\"$MICRO_PATTERN\")) | .number")
                elif [[ "$PR_BODY" =~ Fixes[[:space:]]*#([0-9]+) ]]; then
                  ISSUE_NUMBER="${BASH_REMATCH[1]}"
                fi
                
                if [[ -n "$ISSUE_NUMBER" ]]; then
                  echo "Found related issue #$ISSUE_NUMBER"
                  echo "Executing cleanup: Run $run_id -> PR #$PR_NUMBER -> Issue #$ISSUE_NUMBER"
                  
                  # Step 1: Close the failed PR
                  echo "Closing failed PR #$PR_NUMBER..."
                  gh pr close "$PR_NUMBER" --repo "$REPO" --comment "Closing due to workflow failure. Issue will be recreated automatically."
                  
                  # Step 2: Recreate the issue using the existing script
                  echo "Recreating issue #$ISSUE_NUMBER..."
                  python3 .github/scripts/recreate_micro_issue.py "$ISSUE_NUMBER" "$REPO"
                  
                  echo "Cleanup completed for issue #$ISSUE_NUMBER"
                else
                  echo "Could not find related issue for PR #$PR_NUMBER"
                fi
              else
                echo "No PR found for branch $branch"
              fi
            fi
          done