name: Detect Failed Copilot Runs

on:
  schedule:
    # Check for failed Copilot runs every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      lookback_hours:
        description: 'Hours to look back for failed runs'
        required: false
        type: number
        default: 2

permissions:
  actions: read
  issues: write
  pull-requests: write

jobs:
  detect-and-cleanup:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Detect failed Copilot workflow runs
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"
          LOOKBACK_HOURS="${{ github.event.inputs.lookback_hours || '2' }}"
          
          # Calculate lookback timestamp
          LOOKBACK_TIME=$(date -u -d "${LOOKBACK_HOURS} hours ago" -Iseconds)
          
          echo "üîç Scanning for failed Copilot workflow runs since ${LOOKBACK_TIME}..."
          
          # Get failed Copilot workflow runs
          FAILED_RUNS=$(gh run list --repo "$REPO" \
            --status failure \
            --created ">=${LOOKBACK_TIME}" \
            --json workflowName,id,headBranch,conclusion,createdAt \
            --jq '.[] | select(.workflowName == "Copilot") | {id: .id, branch: .headBranch, created: .createdAt}')
          
          if [ -z "$FAILED_RUNS" ] || [ "$FAILED_RUNS" = "[]" ]; then
            echo "‚úÖ No failed Copilot runs found in the last ${LOOKBACK_HOURS} hours"
            exit 0
          fi
          
          echo "üö® Found failed Copilot runs:"
          echo "$FAILED_RUNS" | jq -r '"Run ID: \(.id), Branch: \(.branch), Created: \(.created)"'
          
          # Process each failed run
          echo "$FAILED_RUNS" | jq -c '.[]?' | while read -r run_data; do
            if [ -z "$run_data" ] || [ "$run_data" = "null" ]; then
              continue
            fi
            
            RUN_ID=$(echo "$run_data" | jq -r '.id')
            BRANCH=$(echo "$run_data" | jq -r '.branch // empty')
            
            echo ""
            echo "üîß Processing failed run: $RUN_ID (branch: $BRANCH)"
            
            if [ -z "$BRANCH" ] || [ "$BRANCH" = "null" ]; then
              echo "‚ö†Ô∏è No branch info for run $RUN_ID, skipping"
              continue
            fi
            
            # Step 1: Find associated PR
            PR_DATA=$(gh pr list --repo "$REPO" --head "$BRANCH" --json number,title,state --limit 1)
            PR_NUMBER=$(echo "$PR_DATA" | jq -r '.[0].number // empty')
            PR_TITLE=$(echo "$PR_DATA" | jq -r '.[0].title // empty')
            PR_STATE=$(echo "$PR_DATA" | jq -r '.[0].state // empty')
            
            if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
              echo "‚ö†Ô∏è No PR found for branch $BRANCH"
              continue
            fi
            
            echo "üìã Found PR: #$PR_NUMBER - $PR_TITLE (state: $PR_STATE)"
            
            # Step 2: Extract issue number from PR title or body
            ISSUE_NUMBER=""
            if [[ "$PR_TITLE" =~ Game-RFC-[0-9]+-([0-9]+) ]]; then
              # Extract from Game-RFC pattern - need to find actual issue
              RFC_PATTERN=$(echo "$PR_TITLE" | grep -o 'Game-RFC-[0-9]\+-[0-9]\+' | head -1)
              echo "üîç Looking for issue with pattern: $RFC_PATTERN"
              
              ISSUE_NUMBER=$(gh issue list --repo "$REPO" --state open --json number,title \
                --jq ".[] | select(.title | contains(\"$RFC_PATTERN\")) | .number" | head -1)
            fi
            
            # Fallback: check PR body for issue references
            if [ -z "$ISSUE_NUMBER" ]; then
              PR_BODY=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json body --jq '.body // empty')
              ISSUE_NUMBER=$(echo "$PR_BODY" | grep -o '#[0-9]\+' | head -1 | tr -d '#' || true)
            fi
            
            if [ -z "$ISSUE_NUMBER" ]; then
              echo "‚ö†Ô∏è Could not determine source issue for PR #$PR_NUMBER"
              continue
            fi
            
            echo "üéØ Source issue identified: #$ISSUE_NUMBER"
            
            # Step 3: Get issue details
            ISSUE_DATA=$(gh issue view "$ISSUE_NUMBER" --repo "$REPO" --json title,state,assignees)
            ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
            ISSUE_STATE=$(echo "$ISSUE_DATA" | jq -r '.state')
            
            echo "üìù Issue: #$ISSUE_NUMBER - $ISSUE_TITLE (state: $ISSUE_STATE)"
            
            # Step 4: Clean up artifacts
            echo "üßπ Cleaning up failed artifacts..."
            
            # Close the failed PR
            if [ "$PR_STATE" = "OPEN" ]; then
              echo "   Closing failed PR #$PR_NUMBER..."
              gh pr close "$PR_NUMBER" --repo "$REPO" --comment "ü§ñ Auto-closing failed PR due to workflow failure (Run ID: $RUN_ID). Starting fresh implementation."
            fi
            
            # Step 5: Restart the issue
            if [ "$ISSUE_STATE" = "OPEN" ]; then
              echo "   Restarting issue #$ISSUE_NUMBER..."
              
              # Add comprehensive restart comment
              gh issue comment "$ISSUE_NUMBER" --repo "$REPO" --body "üîÑ **Auto-Restart from Failed Workflow**

**Failure Detection:**
- Failed Workflow Run: $RUN_ID
- Failed Branch: \`$BRANCH\`
- Failed PR: #$PR_NUMBER (now closed)

**Root Cause Resolution:**
- ‚úÖ Firewall configuration updated (api.githubcopilot.com allowed)
- ‚úÖ Network connectivity issues resolved
- ‚úÖ Failed artifacts cleaned up

**Fresh Implementation Request:**
This is a clean slate restart. Please re-implement from scratch:

**Issue:** $ISSUE_TITLE

The system is now properly configured and ready for successful implementation."
              
              echo "‚úÖ Issue #$ISSUE_NUMBER restarted successfully"
            fi
            
            echo "‚úÖ Completed cleanup for failed run $RUN_ID"
          done
          
          echo ""
          echo "üéâ Failed Copilot run detection and cleanup completed!"

      - name: Summary
        run: |
          echo "üîç Failed Copilot run detection completed"
          echo "‚è∞ Lookback period: ${{ github.event.inputs.lookback_hours || '2' }} hours"
          echo "üîÑ Next scheduled check: 15 minutes"