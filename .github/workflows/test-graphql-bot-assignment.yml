name: Test GraphQL Bot Assignment

on:
  workflow_dispatch:
    inputs:
      run_full_test:
        description: 'Run full test with issue creation (requires permissions)'
        type: boolean
        default: false
  pull_request:
    paths:
      - '.github/scripts/test_graphql_bot_assignment.py'
      - '.github/scripts/validate_bot_assignment_setup.py'
      - '.github/workflows/test-graphql-bot-assignment.yml'

permissions:
  issues: write
  contents: read

jobs:
  validate-setup:
    name: Validate Bot Assignment Setup
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Run setup validation
      run: |
        cd $GITHUB_WORKSPACE
        python3 .github/scripts/validate_bot_assignment_setup.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-graphql-assignment:
    name: Test GraphQL Bot Assignment
    runs-on: ubuntu-latest
    needs: validate-setup
    if: github.event.inputs.run_full_test == 'true' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh

    - name: Configure GitHub CLI
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

    - name: Run GraphQL Bot Assignment Test
      id: test-assignment
      run: |
        cd $GITHUB_WORKSPACE
        python3 .github/scripts/test_graphql_bot_assignment.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: graphql-bot-assignment-test-results
        path: |
          *.log
          test-results-*.json
        retention-days: 7

    - name: Comment on test results
      if: always() && github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const testPassed = ${{ steps.test-assignment.outcome == 'success' }};
          
          const comment = testPassed 
            ? '‚úÖ **GraphQL Bot Assignment Test PASSED**\n\nThe test successfully validated Bot ID assignment using both GraphQL and CLI methods.'
            : '‚ùå **GraphQL Bot Assignment Test FAILED**\n\nThe test encountered issues. Please check the workflow logs for details.';
          
          // If this was triggered by a PR, comment on the PR
          if (context.payload.pull_request) {
            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  security-check:
    name: Security Check for Bot Assignment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check for sensitive data in test scripts
      run: |
        echo "üîç Checking for sensitive data in test scripts..."
        
        # Check for hardcoded tokens or secrets
        if grep -r -i "ghp_\|github_pat_\|ghs_" .github/scripts/; then
          echo "‚ùå Found potential hardcoded tokens!"
          exit 1
        fi
        
        # Check for proper token usage
        if ! grep -q "os.environ.get.*GITHUB_TOKEN" .github/scripts/test_graphql_bot_assignment.py; then
          echo "‚ùå Test script doesn't properly use environment variable for token!"
          exit 1
        fi
        
        echo "‚úÖ Security check passed - no sensitive data found"

    - name: Validate Bot ID format
      run: |
        echo "üîç Validating Bot ID format..."
        
        # Ensure Bot ID follows expected GitHub format
        BOT_ID="BOT_kgDOC9w8XQ"
        if [[ ! "$BOT_ID" =~ ^BOT_[a-zA-Z0-9]+$ ]]; then
          echo "‚ùå Invalid Bot ID format: $BOT_ID"
          exit 1
        fi
        
        echo "‚úÖ Bot ID format is valid: $BOT_ID"